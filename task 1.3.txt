#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int main(int argc, char *argv[]) {
    pid_t pid;

    // Fork a child process
    pid = fork();

    if (pid < 0) { // Fork failed
        fprintf(stderr, "Fork failed\n");
        exit(1);
    } else if (pid == 0) { // Child process
        printf("Child process (PID %d) started\n", getpid());

        // Execute the program specified in argv[1]
        execvp(argv[1], argv + 1);

        // If execvp() returns, then it failed
        fprintf(stderr, "Exec failed\n");
        exit(1);
    } else { // Parent process
        printf("Parent process (PID %d) started child process (PID %d)\n", getpid(), pid);

        // Wait for the child process to complete
        int status;
        wait(&status);

        if (WIFEXITED(status)) {
            printf("Child process exited with status %d\n", WEXITSTATUS(status));
        } else if (WIFSIGNALED(status)) {
            printf("Child process terminated by signal %d\n", WTERMSIG(status));
        }
    }

    return 0;
}

FORKBOMB

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
    while (1) {
        fork();
    }

    return 0;
}



