TASK 1.1
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>



int main() {
    char input_buffer[BUFFER_SIZE];
    char *command_args[BUFFER_SIZE];
    char *token;
    int command_count = 0;
    int i, j;

    while (1) {
        // Print the prompt
        printf("%s$ ", getcwd(NULL, 0));

        // Read user input
        fgets(input_buffer, BUFFER_SIZE, stdin);

        // Remove the newline character from the input buffer
        input_buffer[strlen(input_buffer)-1] = '\0';

        // Tokenize the input buffer
        token = strtok(input_buffer, " ");
        while (token != NULL) {
            command_args[command_count++] = token;
            token = strtok(NULL, " ");
        }
        command_args[command_count] = NULL;

        // Handle built-in functions
        if (strcmp(command_args[0], "cd") == 0) {
            chdir(command_args[1]);
        } else if (strcmp(command_args[0], "history") == 0) {
            for (i = 0; i < command_count; i++) {
                printf("%s ", command_args[i]);
            }
            printf("\n");
        } else if (strcmp(command_args[0], "exit") == 0) {
            exit(0);
        } else {
            // Fork a child process to execute the command
            pid_t pid = fork();

            if (pid == 0) {
                // Child process
                execvp(command_args[0], command_args);
                exit(0);
            } else if (pid > 0) {
                // Parent process
                wait(NULL);
            } else {
                // Error
                printf("Error: fork() failed\n");
            }
        }

        // Reset command count
        command_count = 0;
    }

    return 0;
}